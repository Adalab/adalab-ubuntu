---
- name: Playbook to provision Adalab computer's
  hosts: localhost
  tasks:
    # This file install the apt repository for the NodeSource Node.jx 10.x version for Debian/Ubuntu
    # Docs: https://github.com/nodesource/distributions

    # NodeSource <gpg@nodesource.com>
    # Fingerprint=9FD3 B784 BC1C 6FC3 1A8A  0A1C 1655 A0AB 6857 6280
    - name: Install NodeSource repository key
      apt_key:
        url: "https://deb.nodesource.com/gpgkey/nodesource.gpg.key"
        keyring: "/etc/apt/trusted.gpg.d/nodesource.gpg"
        id: "9FD3B784BC1C6FC31A8A0A1C1655A0AB68576280"
        state: present

    - name: Install Node.js 10x packages NodeSource repositry.
      apt_repository:
        repo: "deb https://deb.nodesource.com/node_10.x {{ ansible_lsb.codename }} main"
        filename: "nodesource"
        mode : 0644
        state: present
        validate_certs: yes

    - name: Install Node.js 10x source packages NodeSource repositry.
      apt_repository:
        repo: "deb-src https://deb.nodesource.com/node_10.x {{ ansible_lsb.codename }} main"
        filename: "nodesource"
        mode : 0644
        state: present
        validate_certs: yes

    - name: Install Node.js 10x source packages NodeSource repositry.
      apt_repository:
        repo: "deb-src https://deb.nodesource.com/node_10.x {{ ansible_lsb.codename }} main"
        filename: "deb_nodesource_10x"
        mode : 0644
        state: present
        validate_certs: yes


    # This file install the apt repository for the Ubuntu Git Maintaners PPA release for Ubuntu
    # Docs: https://launchpad.net/~git-core/+archive/ubuntu/ppa

    # pub  1024R/E1DF1F24 2009-01-22 Launchpad PPA for Ubuntu Git Maintainers
    # Fingerprint=E1DD 2702 88B4 E603 0699  E45F A171 5D88 E1DF 1F24

    - name: Install Ubuntu Git Maintaners PPA repository key
      apt_key:
        keyring: "/etc/apt/trusted.gpg.d/git_ppa.gpg"
        keyserver: "ha.pool.sks-keyservers.net"
        id: "E1DD270288B4E6030699E45FA1715D88E1DF1F24"
        state: present

    - name: Install Ubuntu Git Maintaners PPA repositry.
      apt_repository:
        repo: "deb http://ppa.launchpad.net/git-core/ppa/ubuntu {{ ansible_lsb.codename }} main"
        filename: "git_ppa"
        mode : 0644
        state: present
        validate_certs: yes

    - name: Install Ubuntu Git Maintaners PPA source repositry.
      apt_repository:
        repo: "deb-src http://ppa.launchpad.net/git-core/ppa/ubuntu {{ ansible_lsb.codename }} main"
        filename: "git_ppa"
        mode : 0644
        state: present
        validate_certs: yes

    # This file install the apt repository for Atom release for Debian/Ubuntu
    # Docs: https://flight-manual.atom.io/getting-started/sections/installing-atom/#platform-linux

    # https://packagecloud.io/AtomEditor/atom (https://packagecloud.io/docs#gpg_signing) <support@packagecloud.io>
    # Fingerprint=0A0F AB86 0D48 5603 32EF  B581 B754 42BB DE9E 3B09
    - name: Install AtomEditor atom repository key
      apt_key:
        url: "https://packagecloud.io/AtomEditor/atom/gpgkey"
        keyring: "/etc/apt/trusted.gpg.d/AtomEditor_atom.gpg"
        id: "0A0FAB860D48560332EFB581B75442BBDE9E3B09"
        state: present

    - name: Install AtomEditor atom repositry.
      apt_repository:
        repo: "deb https://packagecloud.io/AtomEditor/atom/any/ any main"
        filename: "AtomEditor_atom"
        mode : 0644
        state: present
        validate_certs: yes

    - name: Install AtomEditor atom source repositry.
      apt_repository:
        repo: "deb-src https://packagecloud.io/AtomEditor/atom/any/ any main"
        filename: "AtomEditor_atom"
        mode : 0644
        state: present
        validate_certs: yes



    - name: Install git, Node.js & Atom
      apt:
        name: "{{ item }}"
        state: latest
        update_cache: yes
      with_items:
        - git
        - nodejs
        - atom

    # This list of tasks install Google Chrome for Debian/Ubuntu
    # docs: https://www.google.com/chrome/ https://www.google.com/linuxrepositories/

    # Google Chrome installer will manage the creation of the apt repo & apt key


    # If running Ansible on virtualenv environments they can't find the python-apt of the system
    # Install prerequisites and get the python-apt package from Debian repo (it's not on pypi):
    # $ sudo apt-get install libapt-pkg-dev
    # $ pip install git+https://anonscm.debian.org/cgit/apt/python-apt.git@ubuntu/trusty
    - name: "Install Google Chrome package"
      become: yes
      apt:
        deb: "https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb"


    # This list of tasks install Koala for Debian Linux flavours
    # You could specify the KOALA_VERSION variable for a specific release
    # Example: KOALA_VERSION: "2.3.0"
    # Docs: https://github.com/oklai/koala

    - block:
      - name: Get latest Koala release data from GitHub
        uri:
          url: "https://api.github.com/repos/oklai/koala/releases/latest"
          method: GET
          validate_certs: yes
          status_code: 200
          return_content: yes
        register: github_api_json_response
      - name: Set latest Koala release name
        set_fact: KOALA_VERSION="{{ github_api_json_response.json.tag_name | regex_replace('^v(.*)$', '\\1')}}"
      delegate_to: 127.0.0.1
      check_mode: no
      when: KOALA_VERSION is undefined

    - name: "Download .deb package for Koala {{ KOALA_VERSION }}"
      get_url:
        url: "https://github.com/oklai/koala/releases/download/v{{ KOALA_VERSION }}/koala_{{ KOALA_VERSION }}_x86_64.deb"
        dest: "/tmp/koala_{{ KOALA_VERSION }}_x86_64.deb"

    # If running Ansible on virtualenv environments they can't find the python-apt of the system
    # Install prerequisites and get the python-apt package from Debian repo (it's not on pypi):
    # $ sudo apt-get install libapt-pkg-dev
    # $ pip install git+https://anonscm.debian.org/cgit/apt/python-apt.git@ubuntu/trusty
    - name: "Install Koala version {{ KOALA_VERSION }}"
      become: yes
      apt:
        deb: "/tmp/koala_{{ KOALA_VERSION }}_x86_64.deb"


    # This list of tasks install Slack for Debian/Ubuntu
    # docs: https://slack.com/intl/es-es/downloads/instructions/linux

    # Slack installer will manage the creation of the apt repo & apt key


    - name: "Define Slack package version to install"
      set_fact:
        SLACK_PACKAGE_VERSION: "3.1.1"

    # If running Ansible on virtualenv environments they can't find the python-apt of the system
    # Install prerequisites and get the python-apt package from Debian repo (it's not on pypi):
    # $ sudo apt-get install libapt-pkg-dev
    # $ pip install git+https://anonscm.debian.org/cgit/apt/python-apt.git@ubuntu/trusty
    - name: "Install Slack package {{ SLACK_PACKAGE_VERSION }}"
      become: yes
      apt:
        deb: "https://downloads.slack-edge.com/linux_releases/slack-desktop-{{ SLACK_PACKAGE_VERSION }}-amd64.deb"
