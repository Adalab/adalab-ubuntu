---
- name: Playbook to provision Adalab computer's
  hosts: localhost
  tasks:
    - name: "Upgrade system"
      apt:
        update_cache: yes
        upgrade: dist

    - name: "Install utilities: {{ item }}"
      apt:
        name: "{{ item }}"
        state: latest
      with_items:
        - htop
        - tree
        - build-essential

# Nodesource repository
    - name: Install NodeSource repository key
      apt_key:
        url: "https://deb.nodesource.com/gpgkey/nodesource.gpg.key"
        keyring: "/etc/apt/trusted.gpg.d/nodesource.gpg"
        id: "9FD3B784BC1C6FC31A8A0A1C1655A0AB68576280"
        state: present
    - name: Install Node.js 8x packages NodeSource repositry.
      apt_repository:
        repo: "deb https://deb.nodesource.com/node_8.x {{ ansible_lsb.codename }} main"
        filename: "nodesource"
        mode : 0644
        state: present
        validate_certs: yes
    - name: Install Node.js 8x source packages NodeSource repositry.
      apt_repository:
        repo: "deb-src https://deb.nodesource.com/node_8.x {{ ansible_lsb.codename }} main"
        filename: "nodesource"
        mode : 0644
        state: present
        validate_certs: yes
    - name: Install Node.js 8x source packages NodeSource repositry.
      apt_repository:
        repo: "deb-src https://deb.nodesource.com/node_8.x {{ ansible_lsb.codename }} main"
        filename: "deb_nodesource_8x"
        mode : 0644
        state: present
        validate_certs: yes

# Git core ppa
    - name: Install Ubuntu Git Maintaners PPA repository key
      apt_key:
        keyring: "/etc/apt/trusted.gpg.d/git_ppa.gpg"
        keyserver: "ha.pool.sks-keyservers.net"
        id: "E1DD270288B4E6030699E45FA1715D88E1DF1F24"
        state: present
    - name: Install Ubuntu Git Maintaners PPA repositry.
      apt_repository:
        repo: "deb http://ppa.launchpad.net/git-core/ppa/ubuntu {{ ansible_lsb.codename }} main"
        filename: "git_ppa"
        mode : 0644
        state: present
        validate_certs: yes
    - name: Install Ubuntu Git Maintaners PPA source repositry.
      apt_repository:
        repo: "deb-src http://ppa.launchpad.net/git-core/ppa/ubuntu {{ ansible_lsb.codename }} main"
        filename: "git_ppa"
        mode : 0644
        state: present
        validate_certs: yes

# Atom repository
    - name: Install AtomEditor atom repository key
      apt_key:
        url: "https://packagecloud.io/AtomEditor/atom/gpgkey"
        keyring: "/etc/apt/trusted.gpg.d/AtomEditor_atom.gpg"
        id: "0A0FAB860D48560332EFB581B75442BBDE9E3B09"
        state: present
    - name: Install AtomEditor atom repositry.
      apt_repository:
        repo: "deb https://packagecloud.io/AtomEditor/atom/any/ any main"
        filename: "AtomEditor_atom"
        mode : 0644
        state: present
        validate_certs: yes
    - name: Install AtomEditor atom source repositry.
      apt_repository:
        repo: "deb-src https://packagecloud.io/AtomEditor/atom/any/ any main"
        filename: "AtomEditor_atom"
        mode : 0644
        state: present
        validate_certs: yes

# Install from repositories
    - name: "Install {{ item }}"
      apt:
        name: "{{ item }}"
        state: latest
        update_cache: yes
      with_items:
        - git
        - nodejs
        - atom

# Installs Koala
    - block:
      - name: Get latest Koala release data from GitHub
        uri:
          url: "https://api.github.com/repos/oklai/koala/releases/latest"
          method: GET
          validate_certs: yes
          status_code: 200
          return_content: yes
        register: github_api_json_response
      - name: Set latest Koala release name
        set_fact: KOALA_VERSION="{{ github_api_json_response.json.tag_name | regex_replace('^v(.*)$', '\\1')}}"
      delegate_to: 127.0.0.1
      check_mode: no
      when: KOALA_VERSION is undefined
    - name: "Download .deb package for Koala {{ KOALA_VERSION }}"
      get_url:
        url: "https://github.com/oklai/koala/releases/download/v{{ KOALA_VERSION }}/koala_{{ KOALA_VERSION }}_x86_64.deb"
        dest: "/tmp/koala_{{ KOALA_VERSION }}_x86_64.deb"
    - name: "Install Koala version {{ KOALA_VERSION }}"
      become: yes
      apt:
        deb: "/tmp/koala_{{ KOALA_VERSION }}_x86_64.deb"


# Install Google Chrome
    - name: "Define Google Chrome package name for install"
      set_fact:
        CHROME_PACKAGE_NAME: "google-chrome-stable_current_amd64.deb"
    - name: "Download deb package for Google Chrome"
      get_url:
        url: "https://dl.google.com/linux/direct/{{ CHROME_PACKAGE_NAME }}"
        dest: "/tmp/{{ CHROME_PACKAGE_NAME }}"
    - name: "Install Google Chrome package"
      become: yes
      apt:
        deb: "/tmp/{{ CHROME_PACKAGE_NAME }}"

# Install Slack
    - name: "Define Slack package version to install"
      set_fact:
        SLACK_PACKAGE_VERSION: "3.1.1"
    - name: "Define Slack package name for install"
      set_fact:
        SLACK_PACKAGE_NAME: "slack-desktop-{{ SLACK_PACKAGE_VERSION }}-amd64.deb"
    - name: "Download deb package for Slack {{ SLACK_PACKAGE_NAME }}"
      get_url:
        url: "https://downloads.slack-edge.com/linux_releases/{{ SLACK_PACKAGE_NAME }}"
        dest: "/tmp/{{ SLACK_PACKAGE_NAME }}"
    - name: "Install Slack package {{ SLACK_PACKAGE_NAME }}"
      become: yes
      apt:
        deb: "/tmp/{{ SLACK_PACKAGE_NAME }}"


# Uninstall the provision timer and service itself
    - name: "Removes the adalab-provision.timer"
      systemd:
        name: adalab-provision.timer
        state: stopped
        enabled: no

    - name: "Removes adalab-provision service and timer files"
      file:
        path: "/etc/systemd/system/{{ item }}"
        state: absent
      with_items:
        - adalab-provision.timer
        - adalab-provision.service
